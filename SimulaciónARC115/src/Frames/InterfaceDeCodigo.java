/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Frames;

import Registros.AX;
import Registros.BX;
import Registros.CX;
import Registros.DX;
import Registros.MemoriaPrincipal;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author User
 */
public class InterfaceDeCodigo extends javax.swing.JFrame {

    /**
     * Creates new form InterfaceDeCodigo
     */
    public InterfaceDeCodigo() {
        initComponents();
        this.setLocationRelativeTo(null);
        ((JPanel)getContentPane()).setOpaque(false);
        ImageIcon imagen = new ImageIcon(this.getClass().getResource("/Img/fondo.jpg"));
        JLabel label = new JLabel();
        label.setIcon(imagen);
        getLayeredPane().add(label, JLayeredPane.FRAME_CONTENT_LAYER);
        label.setBounds(0, 0, imagen.getIconWidth(), imagen.getIconHeight());
        setResizable(false);
        setSize(800,600);
        setLocationRelativeTo(null);
        CampOp.addFocusListener(new FocusListener(){

           @Override
           public void focusGained(FocusEvent fe) {
               CampOp.setText("");
               register.setText("");
               register.enable();
           }

           @Override
           public void focusLost(FocusEvent fe) {
               String aux = CampOp.getText();
               aux = aux.toUpperCase();
               if(aux.startsWith("LO") && aux.endsWith("AD") || aux.startsWith("CLE") && aux.endsWith("AR") || aux.startsWith("S") && aux.endsWith("ET") || aux.startsWith("PU") && aux.endsWith("SH") || aux.startsWith("P") && aux.endsWith("OP") || aux.startsWith("A") && aux.endsWith("BS") || aux.startsWith("N") && aux.endsWith("EG") || aux.startsWith("N") && aux.endsWith("OT") || aux.startsWith("I") && aux.endsWith("NC") || aux.startsWith("D") && aux.endsWith("EC") || aux.startsWith("ST") && aux.endsWith("OR")){
                   register.disable();
               }
               
           }
           
       
       });
        
        /*btnIngresar.addKeyListener(new KeyListener(){

            @Override
            public void keyTyped(KeyEvent ke) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void keyPressed(KeyEvent ke) {
               JOptionPane.showMessageDialog(null, ke.getKeyChar());
            }

            @Override
            public void keyReleased(KeyEvent ke) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
            
        });*/
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CampOp = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        CampoRegistro = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        register = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnIngresar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Bienvenido, introduzca el codigo de operación");

        jLabel2.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Simulador de código");

        CampOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampOpActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Introduzca el registro que quiere utilizar");

        CampoRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoRegistroActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Introduzca un registro");

        jButton1.setText("Inicio");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnIngresar.setText("Ingresar datos");
        btnIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(302, 302, 302))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CampOp, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(register, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CampoRegistro, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(btnIngresar)
                .addContainerGap(255, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(57, 57, 57)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CampOp, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(CampoRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(register, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(btnIngresar))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CampOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampOpActionPerformed
       
    }//GEN-LAST:event_CampOpActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Inicio I = new Inicio();
        I.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarActionPerformed
        String Op = "";
        String Registro = "";
        String CodOp = "";
        String Registro2 = "";
        String palabra = "";
        boolean var;
        MemoriaPrincipal mp = new MemoriaPrincipal();
        Captacion c = new Captacion();
        AX ax = new AX();
        BX bx = new BX();
        CX cx = new CX();
        DX dx = new DX();
        
        Op = CampOp.getText();
        Op = Op.toUpperCase();
        
        Registro = CampoRegistro.getText();
        Registro = Registro.toUpperCase();
        
        Registro2 = register.getText();
        Registro2 = Registro2.toUpperCase();
        
        if( Op.startsWith("LO") && Op.endsWith("AD")){
           CodOp = "0100";
           palabra += CodOp;
           int numero = Integer.parseInt(CampoRegistro.getText());
           
           if(numero < 0 || numero >4096){
               JOptionPane.showMessageDialog(null, "El número debe estar entre 0 y 4096");
               
           }else{
                String binario = Integer.toBinaryString(numero);
                String auxiliar = "";
                while(binario.length()<12){
                    auxiliar = "";
                    auxiliar += "0"; 
                    auxiliar += binario;
                    binario = auxiliar;
                }
                palabra += binario;
                EscribeFichero(palabra);
                mp.setN(this.inicializar());
                c.setVisible(true);
                String cap = Integer.toString(mp.getN().size() - 1);
                c.direccionField.setText(cap);
                dispose();
           }
           
           
        }else{
        
        
        if(Op.startsWith("CL") && Op.endsWith("EAR") || Op.startsWith("S") && Op.endsWith("ET") || Op.startsWith("PU") && Op.endsWith("SH") || Op.startsWith("P") && Op.endsWith("OP") || Op.startsWith("A") && Op.endsWith("BS") || Op.startsWith("N") && Op.endsWith("EG") || Op.startsWith("N") && Op.endsWith("OT") || Op.startsWith("I") && Op.endsWith("NC") || Op.startsWith("D") && Op.endsWith("EC") || Op.startsWith("ST") && Op.endsWith("OR")){
            switch(Op){
                
               case "INC":
                     CodOp = "0101";   
                     palabra += CodOp;
                     break;
               case "DEC":
                     CodOp = "0110";   
                     palabra += CodOp;
                     break;
               case "NOT":
                     CodOp = "0111";   
                     palabra += CodOp;
                     break;
               case "CLEAR":
                     CodOp = "1000";   
                     palabra += CodOp;
                     break;
               case "SET":
                     CodOp = "1001";   
                     palabra += CodOp;
                     break;
               case "ABS":
                     CodOp = "1010";   
                     palabra += CodOp;
                     break;
              case "STOR":
                     CodOp = "1011";   
                     palabra += CodOp;
                     break;
              case "PUSH":
                     CodOp = "1101";   
                     palabra += CodOp;   
                     break;
              case "POP":
                     CodOp = "1110";   
                     palabra += CodOp;
                     break;
              case "NEG":
                     CodOp = "1111";   
                     palabra += CodOp;
                     break;
              default:
                     JOptionPane.showMessageDialog(null, "ingresó un código de operación no válido");
                     CampOp.setText("");
                     register.setText("");
                     CampoRegistro.setText("");
                     break;
        
        
        }
        switch(Registro){
               case "AX":
                    palabra += ax.getDireccion();
                    
                    break;
               case "BX":
                    palabra += bx.getDireccion();    
                    break;
               case "CX":
                    palabra += cx.getDireccion();    
                    break;
               case "DX":
                    palabra += dx.getDireccion();    
                    break;
               case "AH":
                     palabra += ax.getDireccionAH();
                     break;
               case "AL":
                     palabra += ax.getDireccionAL();
                     break;
               case "BH":
                    palabra += bx.getDireccionBH();
                    break;
               case "BL":
                    palabra += bx.getDireccionBL();
                    break;
               case "CH":
                      palabra += cx.getDireccionCH();
                      break;
               case "CL":
                    palabra += cx.getDireccionCL();
                    break;
               case "DH":
                   palabra += dx.getDireccionDH();
                   break;
              case "DL":
                   palabra += dx.getDireccionDL();
                   break;
                  
              default:
                  JOptionPane.showMessageDialog(null, "Ingresó un registro que no ha sido implementado o no existe");
                     break;
        
        
        }
        palabra+="000000";
        EscribeFichero(palabra);
        mp.setN(this.inicializar());
        c.setVisible(true);
        String cap = Integer.toString(mp.getN().size() - 1);
        c.direccionField.setText(cap);
        dispose();
        }else{
        
       
       if(register.getText().length() == 2 && CampoRegistro.getText().length() == 2 && CampOp.getText().length() >= 3 && CampOp.getText().length() <= 5){
        if(CampOp.getText() != ""){
            if(CampoRegistro.getText() != "" ){
                if(register.getText() != ""){
                    var = false;
                }
                else{
                    var = true;
                }
            }
            else{
                var = true;
            }
        }
        else{
            var = true;
         }
       }else{
           var = true;
       } 
       if(!var){
        if(Registro.charAt(0) == Registro2.charAt(0) && Registro.charAt(1) == Registro2.charAt(1)){
            JOptionPane.showMessageDialog(null, "LOS REGISTROS SON IGUALES, TIENE QUE CAMBIARLOS. >:V");
            CampoRegistro.setText("");
            register.setText("");
        }else{
            if(Registro.charAt(1) == 'X' && Registro2.charAt(1) == 'X' || Registro.charAt(1) == 'H' && Registro2.charAt(1) == 'H' || Registro.charAt(1) == 'L' && Registro2.charAt(1) == 'L' || Registro.charAt(1) == 'H' && Registro2.charAt(1) == 'L' || Registro.charAt(1) == 'L' && Registro2.charAt(1) == 'H'){               
        switch(Op){
               case "ADD":
                    CodOp = "0000";
                    palabra += CodOp;
                    break;
               case "SUB":
                    CodOp = "0001";    
                    palabra += CodOp;
                    break;
               case "MPY":
                    CodOp = "0010";    
                    palabra += CodOp;
                    break;
               case "DIV":
                    CodOp = "0011";    
                    palabra += CodOp;
                    break;
               case "LOAD":
                     CodOp = "0100";    
                     palabra += CodOp;
                     break;
               case "INC":
                     CodOp = "0101";   
                     palabra += CodOp;
                     break;
               case "DEC":
                     CodOp = "0110";   
                     palabra += CodOp;
                     break;
               case "NOT":
                     CodOp = "0111";   
                     palabra += CodOp;
                     break;
               case "CLEAR":
                     CodOp = "1000";   
                     palabra += CodOp;
                     break;
               case "SET":
                     CodOp = "1001";   
                     palabra += CodOp;
                     break;
               case "ABS":
                     CodOp = "1010";   
                     palabra += CodOp;
                     break;
              case "STOR":
                     CodOp = "1011";   
                     palabra += CodOp;
                     break;
              case "MOV":
                     CodOp = "1100";   
                     palabra += CodOp;
                     break;
              case "PUSH":
                     CodOp = "1101";   
                     palabra += CodOp;   
                     break;
              case "POP":
                     CodOp = "1110";   
                     palabra += CodOp;
                     break;
              case "NEG":
                     CodOp = "1111";   
                     palabra += CodOp;
                     break;
              default:
                     JOptionPane.showMessageDialog(null, "ingresó un código de operación no válido");
                     CampOp.setText("");
                     register.setText("");
                     CampoRegistro.setText("");
                     break;
        
        
        }
        switch(Registro){
               case "AX":
                    palabra += ax.getDireccion();
                    
                    break;
               case "BX":
                    palabra += bx.getDireccion();    
                    break;
               case "CX":
                    palabra += cx.getDireccion();    
                    break;
               case "DX":
                    palabra += dx.getDireccion();    
                    break;
               case "AH":
                     palabra += ax.getDireccionAH();
                     break;
               case "AL":
                     palabra += ax.getDireccionAL();
                     break;
               case "BH":
                    palabra += bx.getDireccionBH();
                    break;
               case "BL":
                    palabra += bx.getDireccionBL();
                    break;
               case "CH":
                      palabra += cx.getDireccionCH();
                      break;
               case "CL":
                    palabra += cx.getDireccionCL();
                    break;
               case "DH":
                   palabra += dx.getDireccionDH();
                   break;
              case "DL":
                   palabra += dx.getDireccionDL();
                   break;
                  
              default:
                  JOptionPane.showMessageDialog(null, "Ingresó un registro que no ha sido implementado o no existe");
                     break;
        
        
        }
        
        switch(Registro2){
               case "AX":
                    palabra += ax.getDireccion();
                    
                    break;
               case "BX":
                    palabra += bx.getDireccion();    
                    break;
               case "CX":
                    palabra += cx.getDireccion();    
                    break;
               case "DX":
                    palabra += dx.getDireccion();    
                    break;
               case "AH":
                     palabra += ax.getDireccionAH();
                     break;
               case "AL":
                     palabra += ax.getDireccionAL();
                     break;
               case "BH":
                    palabra += bx.getDireccionBH();
                    break;
               case "BL":
                    palabra += bx.getDireccionBL();
                    break;
               case "CH":
                      palabra += cx.getDireccionCH();
                      break;
               case "CL":
                    palabra += cx.getDireccionCL();
                    break;
               case "DH":
                   palabra += dx.getDireccionDH();
                   break;
              case "DL":
                   palabra += dx.getDireccionDL();
                   break;
                  
              default:
                  JOptionPane.showMessageDialog(null, "Ingresó un registro que no ha sido implementado o no existe");
                     break;
        
        
        }
        
        EscribeFichero(palabra);
        mp.setN(this.inicializar());
        c.setVisible(true);
        String cap = Integer.toString(mp.getN().size() - 1);
        c.direccionField.setText(cap);
        
        dispose();
            }else{
                JOptionPane.showMessageDialog(null, "Está asignado o intentando usar una operación con registros que no son compatibles");
                CampoRegistro.setText("");
                register.setText("");
            }
            
        }
       }else{
           JOptionPane.showMessageDialog(null, "Alguno de los campos está vacío o no cumple alguna validación");
       }
      }
    }
    }//GEN-LAST:event_btnIngresarActionPerformed

    private void CampoRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoRegistroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoRegistroActionPerformed
    
    private void EscribeFichero(String palabra)
    {
    
        FileWriter fichero = null;
        PrintWriter pw = null;
        try
        {
            fichero = new FileWriter("src/Datos/MemoriaPrincipal", true);
            pw = new PrintWriter(fichero);

            for (int i = 0; i < 1; i++){
                pw.println(palabra);
            }

        }catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }
   
}
    private ArrayList<String> inicializar(){
        ArrayList<String> array = new ArrayList<String>();
        
        File file = null;
        FileReader read = null;
        BufferedReader buff = null;
        
        try{
            file = new File("src/Datos/MemoriaPrincipal");
            read = new FileReader(file);
            buff = new BufferedReader(read);
            String linea;
            while((linea = buff.readLine()) != null ){
                array.add(linea);
            }
            
        }catch(Exception e){
            e.printStackTrace();
        }finally{
            try{
                if (null != read){
                    read.close();
                }
            }catch(Exception e2){
                e2.printStackTrace();
            }
        }
        return array;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceDeCodigo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceDeCodigo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceDeCodigo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceDeCodigo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfaceDeCodigo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CampOp;
    private javax.swing.JTextField CampoRegistro;
    private javax.swing.JButton btnIngresar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField register;
    // End of variables declaration//GEN-END:variables
}
